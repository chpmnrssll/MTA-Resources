mat4 = {}
local mat4MT = {}

function mat4.new(m)
	if (not m or #m == 0) then
		m = { { 1, 0, 0, 0 },
			  { 0, 1, 0, 0 },
			  { 0, 0, 1, 0 },
			  { 0, 0, 0, 1 } }
	end
	return setmetatable(m, mat4MT)
end

mat4MT.__index = mat4

mat4MT.__add = function(m1, m2)
		return mat4.new({ { m1[1][1] + m2[1][1], m1[1][2] + m2[1][2], m1[1][3] + m2[1][3], m1[1][4] + m2[1][4] },
						  { m1[2][1] + m2[2][1], m1[2][2] + m2[2][2], m1[2][3] + m2[2][3], m1[2][4] + m2[1][4] },
						  { m1[3][1] + m2[3][1], m1[3][2] + m2[3][2], m1[3][3] + m2[3][3], m1[3][4] + m2[1][4] },
						  { m1[4][1] + m2[4][1], m1[4][2] + m2[4][2], m1[4][3] + m2[4][3], m1[4][4] + m2[1][4] } })
	end

mat4MT.__sub = function(m1, m2)
		return mat4.new({ { m1[1][1] - m2[1][1], m1[1][2] - m2[1][2], m1[1][3] - m2[1][3], m1[1][4] - m2[1][4] },
						  { m1[2][1] - m2[2][1], m1[2][2] - m2[2][2], m1[2][3] - m2[2][3], m1[2][4] - m2[1][4] },
						  { m1[3][1] - m2[3][1], m1[3][2] - m2[3][2], m1[3][3] - m2[3][3], m1[3][4] - m2[1][4] },
						  { m1[4][1] - m2[4][1], m1[4][2] - m2[4][2], m1[4][3] - m2[4][3], m1[4][4] - m2[1][4] } })
	end

mat4MT.__unm = function(m)
		return mat4.new({ { -m[1][1], -m[1][2], -m[1][3], -m[1][4] },
						  { -m[2][1], -m[2][2], -m[2][3], -m[1][4] },
						  { -m[3][1], -m[3][2], -m[3][3], -m[1][4] },
						  { -m[4][1], -m[4][2], -m[4][3], -m[1][4] } })
	end

mat4MT.__mul = function(m1, m2)
		return mat4.new({ { m1[1][1] * m2[1][1] + m1[1][2] * m2[2][1] + m1[1][3] * m2[3][1] + m1[1][4] * m2[4][1],
							m1[1][1] * m2[1][2] + m1[1][2] * m2[2][2] + m1[1][3] * m2[3][2] + m1[1][4] * m2[4][2],
							m1[1][1] * m2[1][3] + m1[1][2] * m2[2][3] + m1[1][3] * m2[3][3] + m1[1][4] * m2[4][3],
							m1[1][1] * m2[1][4] + m1[1][2] * m2[2][4] + m1[1][3] * m2[3][4] + m1[1][4] * m2[4][4] },
						  { m1[2][1] * m2[1][1] + m1[2][2] * m2[2][1] + m1[2][3] * m2[3][1] + m1[2][4] * m2[4][1],
							m1[2][1] * m2[1][2] + m1[2][2] * m2[2][2] + m1[2][3] * m2[3][2] + m1[2][4] * m2[4][2],
							m1[2][1] * m2[1][3] + m1[2][2] * m2[2][3] + m1[2][3] * m2[3][3] + m1[2][4] * m2[4][3],
							m1[2][1] * m2[1][4] + m1[2][2] * m2[2][4] + m1[2][3] * m2[3][4] + m1[2][4] * m2[4][4] },
						  { m1[3][1] * m2[1][1] + m1[3][2] * m2[2][1] + m1[3][3] * m2[3][1] + m1[3][4] * m2[4][1],
							m1[3][1] * m2[1][2] + m1[3][2] * m2[2][2] + m1[3][3] * m2[3][2] + m1[3][4] * m2[4][2],
							m1[3][1] * m2[1][3] + m1[3][2] * m2[2][3] + m1[3][3] * m2[3][3] + m1[3][4] * m2[4][3],
							m1[3][1] * m2[1][4] + m1[3][2] * m2[2][4] + m1[3][3] * m2[3][4] + m1[3][4] * m2[4][4] },
						  { m1[4][1] * m2[1][1] + m1[4][2] * m2[2][1] + m1[4][3] * m2[3][1] + m1[4][4] * m2[4][1],
							m1[4][1] * m2[1][2] + m1[4][2] * m2[2][2] + m1[4][3] * m2[3][2] + m1[4][4] * m2[4][2],
							m1[4][1] * m2[1][3] + m1[4][2] * m2[2][3] + m1[4][3] * m2[3][3] + m1[4][4] * m2[4][3],
							m1[4][1] * m2[1][4] + m1[4][2] * m2[2][4] + m1[4][3] * m2[3][4] + m1[4][4] * m2[4][4] } })
	end

function mat4.inv(m)
	local determinant =   m[1][4] * m[2][3] * m[3][2] * m[4][1] - m[1][3] * m[2][4] * m[3][2] * m[4][1]
						- m[1][4] * m[2][2] * m[3][3] * m[4][1] + m[1][2] * m[2][4] * m[3][3] * m[4][1]
						+ m[1][3] * m[2][2] * m[3][4] * m[4][1] - m[1][2] * m[2][3] * m[3][4] * m[4][1]
						- m[1][4] * m[2][3] * m[3][1] * m[4][2] + m[1][3] * m[2][4] * m[3][1] * m[4][2]
						+ m[1][4] * m[2][1] * m[3][3] * m[4][2] - m[1][1] * m[2][4] * m[3][3] * m[4][2]
						- m[1][3] * m[2][1] * m[3][4] * m[4][2] + m[1][1] * m[2][3] * m[3][4] * m[4][2]
						+ m[1][4] * m[2][2] * m[3][1] * m[4][3] - m[1][2] * m[2][4] * m[3][1] * m[4][3]
						- m[1][4] * m[2][1] * m[3][2] * m[4][3] + m[1][1] * m[2][4] * m[3][2] * m[4][3]
						+ m[1][2] * m[2][1] * m[3][4] * m[4][3] - m[1][1] * m[2][2] * m[3][4] * m[4][3]
						- m[1][3] * m[2][2] * m[3][1] * m[4][4] + m[1][2] * m[2][3] * m[3][1] * m[4][4]
						+ m[1][3] * m[2][1] * m[3][2] * m[4][4] - m[1][1] * m[2][3] * m[3][2] * m[4][4]
						- m[1][2] * m[2][1] * m[3][3] * m[4][4] + m[1][1] * m[2][2] * m[3][3] * m[4][4]
	
	return mat4.new({ { ( -m[2][4] * m[3][3] * m[4][2] + m[2][3] * m[3][4] * m[4][2] + m[2][4] * m[3][2] * m[4][3] - m[2][2] * m[3][4] * m[4][3] - m[2][3] * m[3][2] * m[4][4] + m[2][2] * m[3][3] * m[4][4]) / determinant,
						(  m[1][4] * m[3][3] * m[4][2] - m[1][3] * m[3][4] * m[4][2] - m[1][4] * m[3][2] * m[4][3] + m[1][2] * m[3][4] * m[4][3] + m[1][3] * m[3][2] * m[4][4] - m[1][2] * m[3][3] * m[4][4]) / determinant,
						( -m[1][4] * m[2][3] * m[4][2] + m[1][3] * m[2][4] * m[4][2] + m[1][4] * m[2][2] * m[4][3] - m[1][2] * m[2][4] * m[4][3] - m[1][3] * m[2][2] * m[4][4] + m[1][2] * m[2][3] * m[4][4]) / determinant,
						(  m[1][4] * m[2][3] * m[3][2] - m[1][3] * m[2][4] * m[3][2] - m[1][4] * m[2][2] * m[3][3] + m[1][2] * m[2][4] * m[3][3] + m[1][3] * m[2][2] * m[3][4] - m[1][2] * m[2][3] * m[3][4]) / determinant },
					  { (  m[2][4] * m[3][3] * m[4][1] - m[2][3] * m[3][4] * m[4][1] - m[2][4] * m[3][1] * m[4][3] + m[2][1] * m[3][4] * m[4][3] + m[2][3] * m[3][1] * m[4][4] - m[2][1] * m[3][3] * m[4][4]) / determinant,
						( -m[1][4] * m[3][3] * m[4][1] + m[1][3] * m[3][4] * m[4][1] + m[1][4] * m[3][1] * m[4][3] - m[1][1] * m[3][4] * m[4][3] - m[1][3] * m[3][1] * m[4][4] + m[1][1] * m[3][3] * m[4][4]) / determinant,
						(  m[1][4] * m[2][3] * m[4][1] - m[1][3] * m[2][4] * m[4][1] - m[1][4] * m[2][1] * m[4][3] + m[1][1] * m[2][4] * m[4][3] + m[1][3] * m[2][1] * m[4][4] - m[1][1] * m[2][3] * m[4][4]) / determinant,
						( -m[1][4] * m[2][3] * m[3][1] + m[1][3] * m[2][4] * m[3][1] + m[1][4] * m[2][1] * m[3][3] - m[1][1] * m[2][4] * m[3][3] - m[1][3] * m[2][1] * m[3][4] + m[1][1] * m[2][3] * m[3][4]) / determinant },
					  { ( -m[2][4] * m[3][2] * m[4][1] + m[2][2] * m[3][4] * m[4][1] + m[2][4] * m[3][1] * m[4][2] - m[2][1] * m[3][4] * m[4][2] - m[2][2] * m[3][1] * m[4][4] + m[2][1] * m[3][2] * m[4][4]) / determinant,
						(  m[1][4] * m[3][2] * m[4][1] - m[1][2] * m[3][4] * m[4][1] - m[1][4] * m[3][1] * m[4][2] + m[1][1] * m[3][4] * m[4][2] + m[1][2] * m[3][1] * m[4][4] - m[1][1] * m[3][2] * m[4][4]) / determinant,
						( -m[1][4] * m[2][2] * m[4][1] + m[1][2] * m[2][4] * m[4][1] + m[1][4] * m[2][1] * m[4][2] - m[1][1] * m[2][4] * m[4][2] - m[1][2] * m[2][1] * m[4][4] + m[1][1] * m[2][2] * m[4][4]) / determinant,
						(  m[1][4] * m[2][2] * m[3][1] - m[1][2] * m[2][4] * m[3][1] - m[1][4] * m[2][1] * m[3][2] + m[1][1] * m[2][4] * m[3][2] + m[1][2] * m[2][1] * m[3][4] - m[1][1] * m[2][2] * m[3][4]) / determinant },
					  { (  m[2][3] * m[3][2] * m[4][1] - m[2][2] * m[3][3] * m[4][1] - m[2][3] * m[3][1] * m[4][2] + m[2][1] * m[3][3] * m[4][2] + m[2][2] * m[3][1] * m[4][3] - m[2][1] * m[3][2] * m[4][3]) / determinant,
						( -m[1][3] * m[3][2] * m[4][1] + m[1][2] * m[3][3] * m[4][1] + m[1][3] * m[3][1] * m[4][2] - m[1][1] * m[3][3] * m[4][2] - m[1][2] * m[3][1] * m[4][3] + m[1][1] * m[3][2] * m[4][3]) / determinant,
						(  m[1][3] * m[2][2] * m[4][1] - m[1][2] * m[2][3] * m[4][1] - m[1][3] * m[2][1] * m[4][2] + m[1][1] * m[2][3] * m[4][2] + m[1][2] * m[2][1] * m[4][3] - m[1][1] * m[2][2] * m[4][3]) / determinant,
						( -m[1][3] * m[2][2] * m[3][1] + m[1][2] * m[2][3] * m[3][1] + m[1][3] * m[2][1] * m[3][2] - m[1][1] * m[2][3] * m[3][2] - m[1][2] * m[2][1] * m[3][3] + m[1][1] * m[2][2] * m[3][3]) / determinant } })
end

function mat4.translation(v)
	return mat4.new({ { 1, 0, 0, v[1] },
					  { 0, 1, 0, v[2] },
					  { 0, 0, 1, v[3] },
					  { 0, 0, 0, 1 } })
end

function mat4.translationX(x)
	return mat4.new({ { 1, 0, 0, x },
					  { 0, 1, 0, 0 },
					  { 0, 0, 1, 0 },
					  { 0, 0, 0, 1 } })
end

function mat4.translationY(y)
	return mat4.new({ { 1, 0, 0, 0 },
					  { 0, 1, 0, y },
					  { 0, 0, 1, 0 },
					  { 0, 0, 0, 1 } })
end

function mat4.translationZ(z)
	return mat4.new({ { 1, 0, 0, 0 },
					  { 0, 1, 0, 0 },
					  { 0, 0, 1, z },
					  { 0, 0, 0, 1 } })
end

function mat4.rotation(r)
	return mat4.new()*mat4.rotationX(r[1])*mat4.rotationY(r[2])*mat4.rotationZ(r[3])
end

function mat4.rotationX(r)
	local c = math.cos(r)
	local s = math.sin(r)
	return mat4.new({ { 1, 0, 0, 0 },
					  { 0, c,-s, 0 },
					  { 0, s, c, 0 },
					  { 0, 0, 0, 1 } })
end

function mat4.rotationY(r)
	local c = math.cos(r)
	local s = math.sin(r)
	return mat4.new({ { c, 0, s, 0 },
					  { 0, 1, 0, 0 },
					  {-s, 0, c, 0 },
					  { 0, 0, 0, 1 } })
end

function mat4.rotationZ(r)
	local c = math.cos(r)
	local s = math.sin(r)
	return mat4.new({ { c,-s, 0, 0 },
					  { s, c, 0, 0 },
					  { 0, 0, 1, 0 },
					  { 0, 0, 0, 1 } })
end

function mat4.extractTranslationXYZ(m)
	return vec3.new({ m[1][4], m[2][4], m[3][4] })
end

function mat4.extractTranslationYXZ(m)
	return vec3.new({ m[1][4], m[2][4], m[3][4] })
end

function mat4.extractRotationXYZ(m)
	return vec3.new({ math.atan2(m[3][2], m[3][3]), math.asin(-m[3][1]), math.atan2(m[2][1], m[1][1]) })
end

function mat4.extractRotationYXZ(m)
	return vec3.new({ math.asin(m[3][2]), math.atan2(-m[3][1], m[3][3]), math.atan2(-m[1][2], m[2][2]) })
end
